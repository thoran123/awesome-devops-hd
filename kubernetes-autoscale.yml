# ═══════════════════════════════════════════════════════════════════
# COMPLETE KUBERNETES CONFIGURATION WITH AUTO-SCALING
# ═══════════════════════════════════════════════════════════════════
# This single file contains:
# - Deployment with Rolling Updates
# - Service (LoadBalancer)
# - Horizontal Pod Autoscaler (HPA)
# - ConfigMaps & Secrets
# - Resource Limits & Requests
# - Health Probes
# ═══════════════════════════════════════════════════════════════════

---
# ═══════════════════════════════════════════════════════════════════
# CONFIGMAP - Application Configuration
# ═══════════════════════════════════════════════════════════════════
apiVersion: v1
kind: ConfigMap
metadata:
  name: awesome-app-config
  namespace: production
  labels:
    app: awesome-app
    environment: production
data:
  NODE_ENV: "production"
  APP_VERSION: "1.0.0"
  LOG_LEVEL: "info"
  ENABLE_METRICS: "true"

---
# ═══════════════════════════════════════════════════════════════════
# SECRET - Sensitive Configuration
# ═══════════════════════════════════════════════════════════════════
apiVersion: v1
kind: Secret
metadata:
  name: awesome-app-secret
  namespace: production
  labels:
    app: awesome-app
type: Opaque
stringData:
  mongodb-uri: "mongodb://admin:SecurePassword123@mongodb-service:27017/devops-db?authSource=admin"

---
# ═══════════════════════════════════════════════════════════════════
# DEPLOYMENT - Application Pods with Rolling Updates
# ═══════════════════════════════════════════════════════════════════
apiVersion: apps/v1
kind: Deployment
metadata:
  name: awesome-app
  namespace: production
  labels:
    app: awesome-app
    version: v1
    environment: production
spec:
  replicas: 3  # Initial replicas (HPA will adjust this)
  
  # Rolling Update Strategy - ZERO DOWNTIME
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2        # Add 2 new pods before removing old ones
      maxUnavailable: 0  # Never go below desired count during update
  
  selector:
    matchLabels:
      app: awesome-app
      environment: production
  
  template:
    metadata:
      labels:
        app: awesome-app
        version: v1
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    
    spec:
      # Security Context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      
      # Init Container - Wait for database
      initContainers:
      - name: wait-for-db
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z mongodb-service 27017; do echo waiting for mongodb; sleep 2; done']
      
      # Main Application Container
      containers:
      - name: awesome-app
        image: ghcr.io/your-username/awesome-app:latest
        imagePullPolicy: Always
        
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        
        # Environment Variables
        env:
        - name: PORT
          value: "3000"
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: awesome-app-config
              key: NODE_ENV
        - name: APP_VERSION
          valueFrom:
            configMapKeyRef:
              name: awesome-app-config
              key: APP_VERSION
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              name: awesome-app-secret
              key: mongodb-uri
        
        # Resource Management - CRITICAL FOR AUTO-SCALING
        resources:
          requests:
            cpu: 100m      # Minimum guaranteed CPU
            memory: 128Mi  # Minimum guaranteed memory
          limits:
            cpu: 500m      # Maximum CPU allowed
            memory: 512Mi  # Maximum memory allowed
        
        # Liveness Probe - Restart if unhealthy
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        # Readiness Probe - Remove from load balancer if not ready
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        
        # Startup Probe - Allow slow startup
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 30  # 30 * 10s = 5 minutes max startup time
        
        # Security Context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      
      # Restart Policy
      restartPolicy: Always
      
      # DNS Policy
      dnsPolicy: ClusterFirst

---
# ═══════════════════════════════════════════════════════════════════
# SERVICE - LoadBalancer for External Access
# ═══════════════════════════════════════════════════════════════════
apiVersion: v1
kind: Service
metadata:
  name: awesome-app-service
  namespace: production
  labels:
    app: awesome-app
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-health-probe-request-path: /health
spec:
  type: LoadBalancer
  
  selector:
    app: awesome-app
    environment: production
  
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  
  # Session Affinity
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800  # 3 hours

---
# ═══════════════════════════════════════════════════════════════════
# HORIZONTAL POD AUTOSCALER (HPA) - THE MAGIC! 🎯
# ═══════════════════════════════════════════════════════════════════
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: awesome-app-hpa
  namespace: production
  labels:
    app: awesome-app
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: awesome-app
  
  # Scaling Boundaries
  minReplicas: 3   # Never scale below this (High Availability)
  maxReplicas: 10  # Never scale above this (Cost Control)
  
  # Metrics for Scaling Decisions
  metrics:
  
  # CPU-based scaling
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70  # Scale when average CPU > 70%
  
  # Memory-based scaling
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80  # Scale when average memory > 80%
  
  # Advanced Scaling Behavior
  behavior:
    
    # Scale DOWN behavior (Conservative)
    scaleDown:
      stabilizationWindowSeconds: 300  # Wait 5 minutes before scaling down
      policies:
      - type: Percent
        value: 50          # Remove max 50% of pods at once
        periodSeconds: 60
      - type: Pods
        value: 2           # Or remove max 2 pods at once
        periodSeconds: 60
      selectPolicy: Min    # Use the most conservative policy
    
    # Scale UP behavior (Aggressive)
    scaleUp:
      stabilizationWindowSeconds: 0  # Scale up immediately
      policies:
      - type: Percent
        value: 100         # Add up to 100% more pods at once
        periodSeconds: 30
      - type: Pods
        value: 2           # Or add 2 pods at once
        periodSeconds: 30
      selectPolicy: Max    # Use the most aggressive policy

---
# ═══════════════════════════════════════════════════════════════════
# POD DISRUPTION BUDGET - Ensure Availability During Updates
# ═══════════════════════════════════════════════════════════════════
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: awesome-app-pdb
  namespace: production
spec:
  minAvailable: 2  # Always keep at least 2 pods running
  selector:
    matchLabels:
      app: awesome-app
      environment: production

---
# ═══════════════════════════════════════════════════════════════════
# NETWORK POLICY - Security (Optional but Recommended)
# ═══════════════════════════════════════════════════════════════════
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: awesome-app-netpol
  namespace: production
spec:
  podSelector:
    matchLabels:
      app: awesome-app
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  # Allow traffic from LoadBalancer
  - from:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 3000
  
  egress:
  # Allow DNS
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: UDP
      port: 53
  # Allow MongoDB
  - to:
    - podSelector:
        matchLabels:
          app: mongodb
    ports:
    - protocol: TCP
      port: 27017
  # Allow external HTTPS (for API calls)
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 443

---
# ═══════════════════════════════════════════════════════════════════
# MONGODB DEPLOYMENT (Stateful Database)
# ═══════════════════════════════════════════════════════════════════
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: production
  labels:
    app: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:7.0
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: admin
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: SecurePassword123
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        volumeMounts:
        - name: mongodb-storage
          mountPath: /data/db
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: mongodb-storage
        persistentVolumeClaim:
          claimName: mongodb-pvc

---
# ═══════════════════════════════════════════════════════════════════
# MONGODB SERVICE
# ═══════════════════════════════════════════════════════════════════
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: production
  labels:
    app: mongodb
spec:
  type: ClusterIP
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017

---
# ═══════════════════════════════════════════════════════════════════
# PERSISTENT VOLUME CLAIM for MongoDB
# ═══════════════════════════════════════════════════════════════════
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
  namespace: production
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: managed-premium

---
# ═══════════════════════════════════════════════════════════════════
# INGRESS (Optional - for custom domain)
# ═══════════════════════════════════════════════════════════════════
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: awesome-app-ingress
  namespace: production
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - awesome-devops.example.com
    secretName: awesome-app-tls
  rules:
  - host: awesome-devops.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: awesome-app-service
            port:
              number: 80

# ═══════════════════════════════════════════════════════════════════
# END OF KUBERNETES CONFIGURATION
# ═══════════════════════════════════════════════════════════════════
# Total Resources: 11 (Deployment, Service, HPA, PDB, ConfigMap, etc.)
# Features: Auto-Scaling, Zero-Downtime Updates, Health Checks
# 
# To Deploy:
#   kubectl apply -f kubernetes-autoscale.yml
#
# To Watch Auto-Scaling:
#   kubectl get hpa -n production --watch
#   kubectl get pods -n production --watch
#
# To Generate Load (test scaling):
#   kubectl run -it --rm load-generator --image=busybox /bin/sh
#   # Inside pod: while true; do wget -q -O- http://awesome-app-service/health; done
# ═══════════════════════════════════════════════════════════════════